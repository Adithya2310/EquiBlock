{
  "address": "0xA700B4C754401e0a2aD9fB1C9Af5C8f46888c808",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EquiAssetBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EquiAssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralSeized",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ASSET_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_BONUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToBurn",
          "type": "uint256"
        }
      ],
      "name": "burnEquiAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToBurn",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralToSeize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonusAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountPYUSD",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equiAsset",
      "outputs": [
        {
          "internalType": "contract EquiAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "liquidatable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToBurn",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        }
      ],
      "name": "mintEquiAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract MockOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setEquiAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cbe6ae343283423dc30ca558514e9920c042a4f2adc5eec26503f42e2c499d6",
  "receipt": {
    "to": null,
    "from": "0xE5ed485578d6a646D417002a06823584059FBe31",
    "contractAddress": "0xA700B4C754401e0a2aD9fB1C9Af5C8f46888c808",
    "transactionIndex": 53,
    "gasUsed": "1193160",
    "logsBloom": "0x
    "blockHash": "0x01deadced5ba4a80a802ab1c05fc99e346028c5e1767d1c73cc2d40334f78d28",
    "transactionHash": "0x9cbe6ae343283423dc30ca558514e9920c042a4f2adc5eec26503f42e2c499d6",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 9460226,
        "transactionHash": "0x9cbe6ae343283423dc30ca558514e9920c042a4f2adc5eec26503f42e2c499d6",
        "address": "0xA700B4C754401e0a2aD9fB1C9Af5C8f46888c808",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e5ed485578d6a646d417002a06823584059fbe31"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x01deadced5ba4a80a802ab1c05fc99e346028c5e1767d1c73cc2d40334f78d28"
      }
    ],
    "blockNumber": 9460226,
    "cumulativeGasUsed": "6265866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCaC524BcA292aaade2DF8A05cC58F0a65B1B3bB9",
    "0x8065538941277dE710ad23721B81B85800C0b411"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a4b30d642987bc27a3102425339d60f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EquiAssetBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EquiAssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralSeized\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASSET_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"burnEquiAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralToSeize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPYUSD\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equiAsset\",\"outputs\":[{\"internalType\":\"contract EquiAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBurn\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"mintEquiAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract MockOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setEquiAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"liquidate(address,uint256)\":{\"params\":{\"amountToBurn\":\"The amount of eTCS to burn (debt to repay)  How it works: 1. Liquidator must own eTCS tokens (bought from market or minted) 2. Liquidator burns eTCS to pay off user's debt 3. Liquidator receives user's collateral + 10% bonus 4. User's position is partially or fully liquidated\",\"user\":\"The address of the user to liquidate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateLiquidationBonus(address,uint256)\":{\"notice\":\"Calculate liquidation bonus for a given amount\"},\"getUserPosition(address)\":{\"notice\":\"Get user's position details\"},\"liquidate(address,uint256)\":{\"notice\":\"Liquidate an undercollateralized position\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EquiVault.sol\":\"EquiVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/EquiAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EquiAsset is ERC20, Ownable {\\n    address public vault;\\n\\n    constructor() ERC20(\\\"EquiAsset TCS\\\", \\\"eTCS\\\") Ownable(msg.sender) {}\\n\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"Only Vault\\\");\\n        _;\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    // Called by Vault during mint\\n    function mint(address user, uint256 amount) external onlyVault {\\n        _mint(user, amount);\\n    }\\n\\n    // Called by Vault during burn\\n    function burn(address user, uint256 amount) external onlyVault {\\n        _burn(user, amount);\\n    }\\n}\",\"keccak256\":\"0xd40a4d3031bfdd8555809d727a0ccd0b0fabe796b4795795612215f674c9d80d\",\"license\":\"MIT\"},\"contracts/EquiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./EquiAsset.sol\\\";\\nimport \\\"./MockOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EquiVault is Ownable {\\n    IERC20 public pyUSD;               // Collateral token\\n    EquiAsset public equiAsset;        // Synthetic asset (eTCS)\\n    MockOracle public oracle;          // Mock price oracle\\n\\n    uint256 public constant COLLATERAL_RATIO = 500; // 500%\\n    uint256 public constant LIQUIDATION_THRESHOLD = 150; // 150%\\n    uint256 public constant LIQUIDATION_BONUS = 10; // 10% bonus for liquidator\\n    uint256 public constant ASSET_DECIMAL = 1e18;\\n    uint256 public constant USD_DECIMAL = 1e6;             \\n\\n    mapping(address => uint256) public userCollateral;\\n    mapping(address => uint256) public userDebt;\\n\\n    event CollateralDeposited(address indexed user, uint256 amount);\\n    event EquiAssetMinted(address indexed user, uint256 amount);\\n    event EquiAssetBurned(address indexed user, uint256 amount);\\n    event Liquidated(address indexed user, address indexed liquidator, uint256 debtRepaid, uint256 collateralSeized);\\n\\n    constructor(address _pyUSD, address _oracle) Ownable(msg.sender) {\\n        pyUSD = IERC20(_pyUSD);\\n        oracle = MockOracle(_oracle);\\n    }\\n\\n    // Link EquiAsset contract after deployment\\n    function setEquiAsset(address _asset) external onlyOwner {\\n        equiAsset = EquiAsset(_asset);\\n    }\\n\\n    // --------------------------\\n    // 1. Deposit Collateral\\n    // --------------------------\\n    function depositCollateral(uint256 amountPYUSD) external {\\n        require(amountPYUSD > 0, \\\"Invalid amount\\\");\\n        pyUSD.transferFrom(msg.sender, address(this), amountPYUSD);\\n\\n        uint256 normalizedAmount = amountPYUSD * 1e12;\\n\\n        userCollateral[msg.sender] += normalizedAmount;\\n        emit CollateralDeposited(msg.sender, normalizedAmount);\\n    }\\n\\n    // --------------------------\\n    // 2. Mint EquiAsset (eTCS)\\n    // --------------------------\\n    function mintEquiAsset(uint256 amountToMint) external {\\n        require(amountToMint > 0, \\\"Invalid mint amount\\\");\\n\\n        uint256 assetPrice = oracle.getPrice(); // In USD, e.g., 100 * 1e18\\n        uint256 totalDebtAfter = userDebt[msg.sender] + amountToMint;\\n        uint256 requiredCollateral = (totalDebtAfter * assetPrice * COLLATERAL_RATIO) / (100 * ASSET_DECIMAL);\\n\\n        require(\\n            userCollateral[msg.sender] >= requiredCollateral,\\n            \\\"Not enough collateral\\\"\\n        );\\n\\n        userDebt[msg.sender] += amountToMint; // Store in EquiAsset terms\\n        equiAsset.mint(msg.sender, amountToMint);\\n        emit EquiAssetMinted(msg.sender, amountToMint);\\n    }\\n\\n    // --------------------------\\n    // 3. Burn EquiAsset (Repay)\\n    // --------------------------\\n    function burnEquiAsset(uint256 amountToBurn) external {\\n        require(amountToBurn > 0, \\\"Invalid burn amount\\\");\\n        require(userDebt[msg.sender] >= amountToBurn, \\\"Debt is lesser than the burn amount\\\");\\n\\n        uint256 assetPrice = oracle.getPrice();\\n        equiAsset.burn(msg.sender, amountToBurn);\\n        userDebt[msg.sender] -= amountToBurn;\\n\\n        // Allow user to withdraw equivalent PYUSD\\n        uint256 repayValue = (amountToBurn * assetPrice) / ASSET_DECIMAL;\\n        uint256 collateralReleased = (repayValue * COLLATERAL_RATIO) / 100;\\n        userCollateral[msg.sender] -= collateralReleased;\\n\\n        // denormalized the pyUSD collateral\\n        uint256 denormalizedCollateralReleased = collateralReleased/1e12;\\n        pyUSD.transfer(msg.sender, denormalizedCollateralReleased);\\n        emit EquiAssetBurned(msg.sender, amountToBurn);\\n    }\\n\\n    // --------------------------\\n    // 4. Get Collateral Ratio (FIXED)\\n    // --------------------------\\n    function getCollateralRatio(address user) public view returns (uint256) {\\n        if (userDebt[user] == 0) return type(uint256).max; // Infinite ratio if no debt\\n\\n        uint256 assetPrice = oracle.getPrice();\\n        uint256 debtValue = (userDebt[user] * assetPrice) / ASSET_DECIMAL;\\n\\n        // Return ratio scaled to 1e18 (e.g., 5e18 = 500%, 1.5e18 = 150%)\\n        return (userCollateral[user] * 1e18) / debtValue;\\n    }\\n\\n    // --------------------------\\n    // 5. Mock Liquidation Check (VERIFIED)\\n    // --------------------------\\n    function isLiquidatable(address user) public view returns (bool) {\\n        if (userDebt[user] == 0) return false;\\n        uint256 ratio = getCollateralRatio(user);\\n        return ratio < (LIQUIDATION_THRESHOLD * 1e16); // 150% = 1.5 * 1e18\\n    }\\n\\n    // --------------------------\\n    // 6. LIQUIDATION FUNCTION\\n    // --------------------------\\n    /**\\n     * @notice Liquidate an undercollateralized position\\n     * @param user The address of the user to liquidate\\n     * @param amountToBurn The amount of eTCS to burn (debt to repay)\\n     * \\n     * How it works:\\n     * 1. Liquidator must own eTCS tokens (bought from market or minted)\\n     * 2. Liquidator burns eTCS to pay off user's debt\\n     * 3. Liquidator receives user's collateral + 10% bonus\\n     * 4. User's position is partially or fully liquidated\\n     */\\n    function liquidate(address user, uint256 amountToBurn) external {\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        require(amountToBurn > 0, \\\"Invalid amount\\\");\\n        require(isLiquidatable(user), \\\"Position is not liquidatable\\\");\\n        require(userDebt[user] >= amountToBurn, \\\"Amount exceeds user debt\\\");\\n\\n        uint256 assetPrice = oracle.getPrice();\\n        \\n        // Calculate the USD value of debt being repaid\\n        uint256 debtValueRepaid = (amountToBurn * assetPrice) / ASSET_DECIMAL;\\n        \\n        // Calculate collateral to seize (debt value + liquidation bonus)\\n        // Liquidator gets 110% of the debt value they're repaying\\n        uint256 collateralToSeize = (debtValueRepaid * (100 + LIQUIDATION_BONUS)) / 100;\\n        \\n        // Ensure we don't seize more collateral than the user has\\n        if (collateralToSeize > userCollateral[user]) {\\n            collateralToSeize = userCollateral[user];\\n            // In this case, adjust amountToBurn to match available collateral\\n            // This prevents over-liquidation\\n            uint256 maxDebtValue = (collateralToSeize * 100) / (100 + LIQUIDATION_BONUS);\\n            amountToBurn = (maxDebtValue * ASSET_DECIMAL) / assetPrice;\\n            \\n            // Ensure we don't burn more than user's debt\\n            if (amountToBurn > userDebt[user]) {\\n                amountToBurn = userDebt[user];\\n            }\\n        }\\n        \\n        // Burn eTCS tokens from the liquidator\\n        equiAsset.burn(msg.sender, amountToBurn);\\n        \\n        // Update user's position\\n        userDebt[user] -= amountToBurn;\\n        userCollateral[user] -= collateralToSeize;\\n        \\n        // Transfer collateral to liquidator (denormalize from 18 to 6 decimals)\\n        uint256 denormalizedCollateral = collateralToSeize / 1e12;\\n        pyUSD.transfer(msg.sender, denormalizedCollateral);\\n        \\n        emit Liquidated(user, msg.sender, amountToBurn, collateralToSeize);\\n    }\\n\\n    // --------------------------\\n    // 7. View Functions\\n    // --------------------------\\n    \\n    /**\\n     * @notice Get user's position details\\n     */\\n    function getUserPosition(address user) external view returns (\\n        uint256 collateral,\\n        uint256 debt,\\n        uint256 collateralRatio,\\n        bool liquidatable\\n    ) {\\n        collateral = userCollateral[user];\\n        debt = userDebt[user];\\n        collateralRatio = getCollateralRatio(user);\\n        liquidatable = isLiquidatable(user);\\n    }\\n\\n    /**\\n     * @notice Calculate liquidation bonus for a given amount\\n     */\\n    function calculateLiquidationBonus(address user, uint256 amountToBurn) \\n        external \\n        view \\n        returns (uint256 collateralToSeize, uint256 bonusAmount) \\n    {\\n        require(amountToBurn <= userDebt[user], \\\"Amount exceeds debt\\\");\\n        \\n        uint256 assetPrice = oracle.getPrice();\\n        uint256 debtValueRepaid = (amountToBurn * assetPrice) / ASSET_DECIMAL;\\n        \\n        collateralToSeize = (debtValueRepaid * (100 + LIQUIDATION_BONUS)) / 100;\\n        bonusAmount = (debtValueRepaid * LIQUIDATION_BONUS) / 100;\\n        \\n        // Cap at available collateral\\n        if (collateralToSeize > userCollateral[user]) {\\n            collateralToSeize = userCollateral[user];\\n            bonusAmount = collateralToSeize - debtValueRepaid;\\n        }\\n    }\\n}\",\"keccak256\":\"0x1e7b9eaf57ad8fa376cbca0ff75e39b40fec3882ed171919062d32867aec8947\",\"license\":\"MIT\"},\"contracts/MockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract MockOracle {\\n    uint256 private price = 100 * 1e18; // Fixed price: $100\\n\\n    function getPrice() external view returns (uint256) {\\n        return price;\\n    }\\n\\n    function setPrice(uint256 _newPrice) external {\\n        price = _newPrice;\\n    }\\n}\",\"keccak256\":\"0xdb3ee506df08fc6ce22be112c3a3828d6e6eeb8875302e39470036accbca80ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200149838038062001498833981016040819052620000349162000106565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000668162000099565b50600180546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556200013e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010157600080fd5b919050565b600080604083850312156200011a57600080fd5b6200012583620000e9565b91506200013560208401620000e9565b90509250929050565b61134a806200014e6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063b69e5c77116100b8578063de7de6271161007c578063de7de627146102b2578063e736e3f7146102c5578063e81e6ce7146102d8578063f2fde38b14610300578063f3e2fd9d14610313578063f69f1e4a1461031d57600080fd5b8063b69e5c7714610254578063bad4a01f14610274578063bcbaf48714610287578063d083cff01461029a578063d9e69a05146102a957600080fd5b8063715018a61161010a578063715018a6146101f85780637dc0d1d0146102025780638da5cb5b1461021557806390a8ae9b14610226578063a11c7bb41461022e578063abee0c3a1461024157600080fd5b8063042e02cf1461014757806315a3ba431461016f57806325dd0aca146101905780633574d4c4146101bb5780635b7c2dad146101c3575b600080fd5b61015a6101553660046111f9565b61033d565b60405190151581526020015b60405180910390f35b61018261017d3660046111f9565b61038a565b604051908152602001610166565b6002546101a3906001600160a01b031681565b6040516001600160a01b039091168152602001610166565b610182600a81565b6101d66101d13660046111f9565b61049e565b6040805194855260208501939093529183015215156060820152608001610166565b6102006104e2565b005b6003546101a3906001600160a01b031681565b6000546001600160a01b03166101a3565b610182609681565b61020061023c3660046111f9565b6104f6565b61020061024f36600461121b565b610520565b6101826102623660046111f9565b60056020526000908152604090205481565b61020061028236600461121b565b6107f8565b610200610295366004611234565b610928565b610182670de0b6b3a764000081565b6101826101f481565b6102006102c036600461121b565b610d7b565b6001546101a3906001600160a01b031681565b6102eb6102e6366004611234565b610fa3565b60408051928352602083019190915201610166565b61020061030e3660046111f9565b611122565b610182620f424081565b61018261032b3660046111f9565b60046020526000908152604090205481565b6001600160a01b038116600090815260056020526040812054810361036457506000919050565b600061036f8361038a565b90506103836096662386f26fc10000611274565b1192915050565b6001600160a01b03811660009081526005602052604081205481036103b25750600019919050565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611291565b6001600160a01b03841660009081526005602052604081205491925090670de0b6b3a764000090610452908490611274565b61045c91906112aa565b6001600160a01b038516600090815260046020526040902054909150819061048c90670de0b6b3a7640000611274565b61049691906112aa565b949350505050565b6001600160a01b03811660009081526004602090815260408083205460059092528220549091806104ce8561038a565b91506104d98561033d565b90509193509193565b6104ea611160565b6104f4600061118d565b565b6104fe611160565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000811161056b5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908189d5c9b88185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b336000908152600560205260409020548111156105d65760405162461bcd60e51b815260206004820152602360248201527f44656274206973206c6573736572207468616e20746865206275726e20616d6f6044820152621d5b9d60ea1b6064820152608401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190611291565b600254604051632770a7eb60e21b8152336004820152602481018590529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b505033600090815260056020526040812080548694509092506106c99084906112cc565b9091555060009050670de0b6b3a76400006106e48385611274565b6106ee91906112aa565b9050600060646107006101f484611274565b61070a91906112aa565b3360009081526004602052604081208054929350839290919061072e9084906112cc565b909155506000905061074564e8d4a51000836112aa565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb91906112df565b5060405185815233907f2b8d0f3441b858af08efbde4cebfd7d196ab8c029269bc3a414ac8b8038f7eb69060200160405180910390a25050505050565b600081116108395760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610562565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906112df565b5060006108c68264e8d4a51000611274565b336000908152600460205260408120805492935083929091906108ea908490611301565b909155505060405181815233907fd7243f6f8212d5188fd054141cf6ea89cfc0d91facb8c3afe2f88a13584801429060200160405180910390a25050565b6001600160a01b0382166109755760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b6044820152606401610562565b600081116109b65760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610562565b6109bf8261033d565b610a0b5760405162461bcd60e51b815260206004820152601c60248201527f506f736974696f6e206973206e6f74206c6971756964617461626c65000000006044820152606401610562565b6001600160a01b038216600090815260056020526040902054811115610a735760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420657863656564732075736572206465627400000000000000006044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190611291565b90506000670de0b6b3a7640000610af88385611274565b610b0291906112aa565b905060006064610b13600a82611301565b610b1d9084611274565b610b2791906112aa565b6001600160a01b038616600090815260046020526040902054909150811115610be657506001600160a01b03841660009081526004602052604081205490610b71600a6064611301565b610b7c836064611274565b610b8691906112aa565b905083610b9b670de0b6b3a764000083611274565b610ba591906112aa565b6001600160a01b038716600090815260056020526040902054909550851115610be4576001600160a01b03861660009081526005602052604090205494505b505b600254604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506001600160a01b03851660009081526005602052604081208054869290610c729084906112cc565b90915550506001600160a01b03851660009081526004602052604081208054839290610c9f9084906112cc565b9091555060009050610cb664e8d4a51000836112aa565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c91906112df565b50604080518681526020810184905233916001600160a01b038916917f1f0c6615429d1cdae0dfa233abf91d3b31cdbdd82c8081389832a61e1072f1ea910160405180910390a3505050505050565b60008111610dc15760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b5a5b9d08185b5bdd5b9d606a1b6044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190611291565b3360009081526005602052604081205491925090610e4e908490611301565b90506000610e65670de0b6b3a76400006064611274565b6101f4610e728585611274565b610e7c9190611274565b610e8691906112aa565b33600090815260046020526040902054909150811115610ee05760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610562565b3360009081526005602052604081208054869290610eff908490611301565b90915550506002546040516340c10f1960e01b8152336004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b50506040518681523392507ff17c8137eb3182d96d376862c461afabe6b05b1407128f2da73a818dea07fe40915060200160405180910390a250505050565b6001600160a01b03821660009081526005602052604081205481908311156110035760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d08195e18d959591cc81919589d606a1b6044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611291565b90506000670de0b6b3a76400006110888387611274565b61109291906112aa565b905060646110a1600a82611301565b6110ab9083611274565b6110b591906112aa565b935060646110c4600a83611274565b6110ce91906112aa565b6001600160a01b038716600090815260046020526040902054909350841115611119576001600160a01b038616600090815260046020526040902054935061111681856112cc565b92505b50509250929050565b61112a611160565b6001600160a01b03811661115457604051631e4fbdf760e01b815260006004820152602401610562565b61115d8161118d565b50565b6000546001600160a01b031633146104f45760405163118cdaa760e01b8152336004820152602401610562565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146111f457600080fd5b919050565b60006020828403121561120b57600080fd5b611214826111dd565b9392505050565b60006020828403121561122d57600080fd5b5035919050565b6000806040838503121561124757600080fd5b611250836111dd565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761128b5761128b61125e565b92915050565b6000602082840312156112a357600080fd5b5051919050565b6000826112c757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561128b5761128b61125e565b6000602082840312156112f157600080fd5b8151801515811461121457600080fd5b8082018082111561128b5761128b61125e56fea2646970667358221220bc1f60ee97291772d441b6b59a1836eec8c22d252c1c8a7ebac1668bf1007efc64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063b69e5c77116100b8578063de7de6271161007c578063de7de627146102b2578063e736e3f7146102c5578063e81e6ce7146102d8578063f2fde38b14610300578063f3e2fd9d14610313578063f69f1e4a1461031d57600080fd5b8063b69e5c7714610254578063bad4a01f14610274578063bcbaf48714610287578063d083cff01461029a578063d9e69a05146102a957600080fd5b8063715018a61161010a578063715018a6146101f85780637dc0d1d0146102025780638da5cb5b1461021557806390a8ae9b14610226578063a11c7bb41461022e578063abee0c3a1461024157600080fd5b8063042e02cf1461014757806315a3ba431461016f57806325dd0aca146101905780633574d4c4146101bb5780635b7c2dad146101c3575b600080fd5b61015a6101553660046111f9565b61033d565b60405190151581526020015b60405180910390f35b61018261017d3660046111f9565b61038a565b604051908152602001610166565b6002546101a3906001600160a01b031681565b6040516001600160a01b039091168152602001610166565b610182600a81565b6101d66101d13660046111f9565b61049e565b6040805194855260208501939093529183015215156060820152608001610166565b6102006104e2565b005b6003546101a3906001600160a01b031681565b6000546001600160a01b03166101a3565b610182609681565b61020061023c3660046111f9565b6104f6565b61020061024f36600461121b565b610520565b6101826102623660046111f9565b60056020526000908152604090205481565b61020061028236600461121b565b6107f8565b610200610295366004611234565b610928565b610182670de0b6b3a764000081565b6101826101f481565b6102006102c036600461121b565b610d7b565b6001546101a3906001600160a01b031681565b6102eb6102e6366004611234565b610fa3565b60408051928352602083019190915201610166565b61020061030e3660046111f9565b611122565b610182620f424081565b61018261032b3660046111f9565b60046020526000908152604090205481565b6001600160a01b038116600090815260056020526040812054810361036457506000919050565b600061036f8361038a565b90506103836096662386f26fc10000611274565b1192915050565b6001600160a01b03811660009081526005602052604081205481036103b25750600019919050565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611291565b6001600160a01b03841660009081526005602052604081205491925090670de0b6b3a764000090610452908490611274565b61045c91906112aa565b6001600160a01b038516600090815260046020526040902054909150819061048c90670de0b6b3a7640000611274565b61049691906112aa565b949350505050565b6001600160a01b03811660009081526004602090815260408083205460059092528220549091806104ce8561038a565b91506104d98561033d565b90509193509193565b6104ea611160565b6104f4600061118d565b565b6104fe611160565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000811161056b5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908189d5c9b88185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b336000908152600560205260409020548111156105d65760405162461bcd60e51b815260206004820152602360248201527f44656274206973206c6573736572207468616e20746865206275726e20616d6f6044820152621d5b9d60ea1b6064820152608401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190611291565b600254604051632770a7eb60e21b8152336004820152602481018590529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b505033600090815260056020526040812080548694509092506106c99084906112cc565b9091555060009050670de0b6b3a76400006106e48385611274565b6106ee91906112aa565b9050600060646107006101f484611274565b61070a91906112aa565b3360009081526004602052604081208054929350839290919061072e9084906112cc565b909155506000905061074564e8d4a51000836112aa565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb91906112df565b5060405185815233907f2b8d0f3441b858af08efbde4cebfd7d196ab8c029269bc3a414ac8b8038f7eb69060200160405180910390a25050505050565b600081116108395760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610562565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906112df565b5060006108c68264e8d4a51000611274565b336000908152600460205260408120805492935083929091906108ea908490611301565b909155505060405181815233907fd7243f6f8212d5188fd054141cf6ea89cfc0d91facb8c3afe2f88a13584801429060200160405180910390a25050565b6001600160a01b0382166109755760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b6044820152606401610562565b600081116109b65760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610562565b6109bf8261033d565b610a0b5760405162461bcd60e51b815260206004820152601c60248201527f506f736974696f6e206973206e6f74206c6971756964617461626c65000000006044820152606401610562565b6001600160a01b038216600090815260056020526040902054811115610a735760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420657863656564732075736572206465627400000000000000006044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190611291565b90506000670de0b6b3a7640000610af88385611274565b610b0291906112aa565b905060006064610b13600a82611301565b610b1d9084611274565b610b2791906112aa565b6001600160a01b038616600090815260046020526040902054909150811115610be657506001600160a01b03841660009081526004602052604081205490610b71600a6064611301565b610b7c836064611274565b610b8691906112aa565b905083610b9b670de0b6b3a764000083611274565b610ba591906112aa565b6001600160a01b038716600090815260056020526040902054909550851115610be4576001600160a01b03861660009081526005602052604090205494505b505b600254604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506001600160a01b03851660009081526005602052604081208054869290610c729084906112cc565b90915550506001600160a01b03851660009081526004602052604081208054839290610c9f9084906112cc565b9091555060009050610cb664e8d4a51000836112aa565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c91906112df565b50604080518681526020810184905233916001600160a01b038916917f1f0c6615429d1cdae0dfa233abf91d3b31cdbdd82c8081389832a61e1072f1ea910160405180910390a3505050505050565b60008111610dc15760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b5a5b9d08185b5bdd5b9d606a1b6044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190611291565b3360009081526005602052604081205491925090610e4e908490611301565b90506000610e65670de0b6b3a76400006064611274565b6101f4610e728585611274565b610e7c9190611274565b610e8691906112aa565b33600090815260046020526040902054909150811115610ee05760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610562565b3360009081526005602052604081208054869290610eff908490611301565b90915550506002546040516340c10f1960e01b8152336004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b50506040518681523392507ff17c8137eb3182d96d376862c461afabe6b05b1407128f2da73a818dea07fe40915060200160405180910390a250505050565b6001600160a01b03821660009081526005602052604081205481908311156110035760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d08195e18d959591cc81919589d606a1b6044820152606401610562565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611291565b90506000670de0b6b3a76400006110888387611274565b61109291906112aa565b905060646110a1600a82611301565b6110ab9083611274565b6110b591906112aa565b935060646110c4600a83611274565b6110ce91906112aa565b6001600160a01b038716600090815260046020526040902054909350841115611119576001600160a01b038616600090815260046020526040902054935061111681856112cc565b92505b50509250929050565b61112a611160565b6001600160a01b03811661115457604051631e4fbdf760e01b815260006004820152602401610562565b61115d8161118d565b50565b6000546001600160a01b031633146104f45760405163118cdaa760e01b8152336004820152602401610562565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146111f457600080fd5b919050565b60006020828403121561120b57600080fd5b611214826111dd565b9392505050565b60006020828403121561122d57600080fd5b5035919050565b6000806040838503121561124757600080fd5b611250836111dd565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761128b5761128b61125e565b92915050565b6000602082840312156112a357600080fd5b5051919050565b6000826112c757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561128b5761128b61125e565b6000602082840312156112f157600080fd5b8151801515811461121457600080fd5b8082018082111561128b5761128b61125e56fea2646970667358221220bc1f60ee97291772d441b6b59a1836eec8c22d252c1c8a7ebac1668bf1007efc64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "liquidate(address,uint256)": {
        "params": {
          "amountToBurn": "The amount of eTCS to burn (debt to repay)  How it works: 1. Liquidator must own eTCS tokens (bought from market or minted) 2. Liquidator burns eTCS to pay off user's debt 3. Liquidator receives user's collateral + 10% bonus 4. User's position is partially or fully liquidated",
          "user": "The address of the user to liquidate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateLiquidationBonus(address,uint256)": {
        "notice": "Calculate liquidation bonus for a given amount"
      },
      "getUserPosition(address)": {
        "notice": "Get user's position details"
      },
      "liquidate(address,uint256)": {
        "notice": "Liquidate an undercollateralized position"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1021,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "pyUSD",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 1024,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "equiAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(EquiAsset)1010"
      },
      {
        "astId": 1027,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MockOracle)1698"
      },
      {
        "astId": 1046,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "userCollateral",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1050,
        "contract": "contracts/EquiVault.sol:EquiVault",
        "label": "userDebt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(EquiAsset)1010": {
        "encoding": "inplace",
        "label": "contract EquiAsset",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(MockOracle)1698": {
        "encoding": "inplace",
        "label": "contract MockOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}